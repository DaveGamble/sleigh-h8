# About running SLEIGH: https://swarm.ptsecurity.com/creating-a-ghidra-processor-module-in-sleigh-using-v8-bytecode-as-an-example/
# SLEIGH language: https://spinsel.dev/assets/2020-06-17-ghidra-brainfuck-processor-1/ghidra_docs/language_spec/html/sleigh_definitions.html

# H8/300 reference: https://www.classes.cs.uchicago.edu/archive/2006/winter/23000-1/docs/h8300.pdf
# H8/300H reference: http://www.bitsavers.org/components/hitachi/h8/H8_300H_Programming_Manual.pdf

# ..\..\..\..\..\support\sleigh.bat h8.slaspec h8.sla

define endian=big;

define alignment=2;

define space ram type=ram_space size=2 default;
define space register type=register_space size=2;


define space address type=ram_space size=2;

# Overlapping names for general registers
define register offset=0 size=2 [r0 r1 r2 r3 r4 r5 r6 sp];
define register offset=0 size=1 [r0h r0l r1h r1l r2h r2l r3h r3l r4h r4l r5h r5l r6h r6l r7h r7l];

define register offset=0x100 size=2 [pc];
define register offset=0x200 size=1 [ccr];

# CCR Flags
@define I_FLAG   "ccr[7,1]"
@define UI_FLAG  "ccr[6,1]"
@define H_FLAG  "ccr[5,1]"
@define U_FLAG  "ccr[4,1]"
@define N_FLAG   "ccr[3,1]"
@define Z_FLAG   "ccr[2,1]"
@define V_FLAG   "ccr[1,1]"
@define C_FLAG   "ccr[0,1]"

define token ins1(8)
	op4=(4,7)
	op8=(0,7)
	sreg=(4,7)
	dreg=(0,3)
	imm8=(0,7)
	simm8=(0,7) signed
	rs3=(4,6)
	rd3=(0,2)
	imm4=(0,3)
	bit=(4,6)
	ccfld=(0,3)
	b3=(3,3)
	b7=(7,7)
	lnyb=(0,3)
	hnyb=(4,7)
;

define token ins2(16)
	imm16=(0,15)
;

define token ins3(24)
	op24=(0,23)
;

# How is this implemented?!
define pcodeop bcdAdjust;

macro push2(val) { sp = sp-2; *[register]:2 sp = val; }

macro pop2(val) { val = *[register]:2 sp; sp = sp+2; }

macro resflags(result) {
	$(Z_FLAG) = (result == 0);
	$(N_FLAG) = (result s< 0);
}

macro movflags(result) {
	$(Z_FLAG) = (result == 0);
	$(N_FLAG) = (result s< 0);
	$(V_FLAG) = 0;
}

macro addflags(operand1, operand2) {
	local AFmask = -1 >> 4;
	$(H_FLAG) = (((operand1 & AFmask) + (operand2 & AFmask)) & (AFmask + 1)) != 0;
	$(V_FLAG) = scarry(operand1, operand2);
	$(C_FLAG) = carry(operand1, operand2);
}

macro subflags3(operand1,operand2) {
  $(H_FLAG) = (operand1 & 15) < (operand2 & 15);
  $(V_FLAG) = sborrow(operand1,operand2);
  $(C_FLAG) = operand1 < operand2;
}

macro subflags11(operand1,operand2) {
  $(H_FLAG) = (operand1 & 4095) < (operand2 & 4095);
  $(V_FLAG) = sborrow(operand1,operand2);
  $(C_FLAG) = operand1 < operand2;
}

# maps register names to fields
attach variables [ sreg dreg ] [ r0l r1l r2l r3l r4l r5l r6l r7l r0h r1h r2h r3h r4h r5h r6h r7h ];
attach variables [ rs3 rd3 ] [ r0 r1 r2 r3 r4 r5 r6 sp ];

# H8/300 instructions

addr8: @addr8 is addr8 { export *:2 addr8; }
addr16: @addr16 is addr16 { export *:2 addr16; }
imm8mem.b: @imm8 is imm8 { export *:1 imm8; }
imm16mem.b: @imm16 is imm16 { export *:1 imm16; }
imm16mem.w: @imm16 is imm16 { export *:2 imm16; }
pcoff8: reloc is simm8 [ reloc=inst_next+simm8; ] { export *:3 reloc; }

cc: "ra" is ccfld=0 { export 1:1; }
cc: "rn" is ccfld=1 { export 0:1; }
cc: "hi" is ccfld=2 { tmp:1 = !($(C_FLAG) || $(Z_FLAG)); export tmp; }
cc: "ls" is ccfld=3 { tmp:1 = $(C_FLAG) || $(Z_FLAG); export tmp; }
cc: "cc" is ccfld=4 { tmp:1 = !$(C_FLAG); export tmp; }
cc: "cs" is ccfld=5 { tmp:1 = $(C_FLAG); export tmp; }
cc: "ne" is ccfld=6 { tmp:1 = !$(Z_FLAG); export tmp; }
cc: "eq" is ccfld=7 { tmp:1 = $(Z_FLAG); export tmp; }
cc: "vc" is ccfld=8 { tmp:1 = !$(V_FLAG); export tmp; }
cc: "vs" is ccfld=9 { tmp:1 = $(V_FLAG); export tmp; }
cc: "pl" is ccfld=10 { tmp:1 = !$(N_FLAG); export tmp; }
cc: "mi" is ccfld=11 { tmp:1 = $(N_FLAG); export tmp; }
cc: "ge" is ccfld=12 { tmp:1 = ($(V_FLAG)==$(N_FLAG)); export tmp; }
cc: "lt" is ccfld=13 { tmp:1 = ($(V_FLAG)!=$(N_FLAG)); export tmp; }
cc: "gt" is ccfld=14 { tmp:1 = !$(Z_FLAG) && ($(V_FLAG)==$(N_FLAG)); export tmp; }
cc: "le" is ccfld=15 { tmp:1 = $(Z_FLAG) || ($(V_FLAG)!=$(N_FLAG)); export tmp; }


:add.b #imm8,dreg is op4=0x8 & dreg; imm8 {
	addflags(dreg, imm8);
	dreg = dreg + imm8;
	resflags(dreg);
}
:add.b sreg,dreg is op8=0x08; sreg & dreg {
	addflags(dreg, sreg);
	dreg = dreg + sreg;
	resflags(dreg);
}
:add.w rs3,rd3 is op8=0x09; b7=0 & rs3 & b3=0 & rd3 {
	addflags(rd3, rs3);
	rd3 = rd3 + rs3;
	resflags(rd3);
}
:adds #1,rd3 is op8=0x0B; op4=0 & b3=0 & rd3 { rd3 = rd3 + 1; }
:adds #2,rd3 is op8=0x0B; op4=8 & b3=0 & rd3 { rd3 = rd3 + 2; }
:addx #imm8,dreg is op4=0x9 & dreg; imm8 {
	local srcop = imm8 + $(C_FLAG);
	addflags(dreg, srcop);
	dreg = dreg + srcop;
	resflags(dreg);
}
:addx sreg,dreg is op8=0x0E; sreg & dreg {
	local srcop = sreg + $(C_FLAG);
	addflags(dreg, srcop);
	dreg = dreg + srcop;
	resflags(dreg);
}
:and #imm8,dreg is op4=0xE & dreg; imm8 {
	dreg = dreg & imm8;
	movflags(dreg);
}
:and sreg,dreg is op8=0x16; sreg & dreg {
	dreg = dreg & sreg;
	movflags(dreg);
}
:andc "#"imm8,"ccr" is op8=0x06; imm8 { ccr = ccr & imm8; }

:b^cc pcoff8 is op4=4 & cc; pcoff8 {
	if (cc) goto pcoff8;
}

:band #bit,dreg is op8=0x76; b7=0 & bit & dreg {
	local rbit = (dreg >> bit) & 1;
	$(C_FLAG) = $(C_FLAG) & rbit;
}
:band #bit,@rs3 is op8=0x7C; b7=0 & rs3 & lnyb=0; op8=0x76; b7=0 & bit & lnyb=0 { 
	$(C_FLAG) = $(C_FLAG) & ((* rs3) >> bit);
}
:band #bit,imm8mem.b is op8=0x7E; imm8mem.b; op8=0x76; b7=0 & bit & lnyb=0 {
	$(C_FLAG) = $(C_FLAG) & (imm8mem.b >> bit);
}
:bclr #bit,dreg is op8=0x72; b7=0 & bit & dreg {
	dreg = dreg & ~(1 << bit);
}
:bclr #bit,@rs3 is op8=0x7D; b7=0 & rs3 & lnyb=0; op8=0x72; b7=0 & bit & lnyb=0 {
	* rs3 = (*:1 rs3) & ~(1 << bit);
}
:bclr #bit,imm8mem.b is op8=0x7F; imm8mem.b; op8=0x72; b7=0 & bit & lnyb=0 {
	imm8mem.b = imm8mem.b &  ~(1 << bit);
}
:bclr sreg,dreg is op8=0x62; sreg & dreg {
	dreg = dreg & ~(1 << (sreg & 7));
}
:bclr sreg,@rs3 is op8=0x7D; b7=0 & rs3 & lnyb=0; op8=0x62; sreg & lnyb=0 {
	* rs3 = (*:1 rs3) & ~(1 << (sreg & 7));
}
:bclr sreg,imm8mem.b is op8=0x7F; imm8mem.b; op8=0x62; sreg & lnyb=0 {
	imm8mem.b = imm8mem.b &  ~(1 << (sreg & 7));
}
:biand #bit,dreg is op8=0x76; b7=1 & bit & dreg {
	local rbit = ~((dreg >> bit) & 1);
	$(C_FLAG) = $(C_FLAG) & rbit;
}
:biand #bit,@rs3 is op8=0x7C; b7=0 & rs3 & lnyb=0; op8=0x76; b7=1 & bit & lnyb=0 { 
	$(C_FLAG) = $(C_FLAG) & ~((* rs3) >> bit);
}
:biand #bit,imm8mem.b is op8=0x7E; imm8mem.b; op8=0x76; b7=1 & bit & lnyb=0 {
	$(C_FLAG) = $(C_FLAG) & ~(imm8mem.b >> bit);
}
:bild #bit,dreg is op8=0x77; b7=1 & bit & dreg {
	$(C_FLAG) = ~((dreg >> bit) & 1);
}
:bild #bit,@rs3 is op8=0x7C; b7=0 & rs3 & lnyb=0; op8=0x77; b7=1 & bit & lnyb=0 { 
	$(C_FLAG) = ~((* rs3) >> bit);
}
:bild #bit,imm8mem.b is op8=0x7E; imm8mem.b; op8=0x77; b7=1 & bit & lnyb=0 {
	$(C_FLAG) = ~(imm8mem.b >> bit);
}
:bior #bit,dreg is op8=0x74; b7=1 & bit & dreg {
	local rbit = ~((dreg >> bit) & 1);
	$(C_FLAG) = $(C_FLAG) | rbit;
}
:bior #bit,@rs3 is op8=0x7C; b7=0 & rs3 & lnyb=0; op8=0x74; b7=1 & bit & lnyb=0 { 
	$(C_FLAG) = $(C_FLAG) | ~((* rs3) >> bit);
}
:bior #bit,imm8mem.b is op8=0x7E; imm8mem.b; op8=0x74; b7=1 & bit & lnyb=0 {
	$(C_FLAG) = $(C_FLAG) | ~(imm8mem.b >> bit);
}
:bist #bit,dreg is op8=0x67; b7=1 & bit & dreg {
	local masked = dreg & ~(1 << bit);
	dreg = masked | (~$(C_FLAG) << bit);
}
:bist #bit,@rs3 is op8=0x7D; b7=0 & rs3 & lnyb=0; op8=0x67; b7=1 & bit & lnyb=0 {
	local masked = (*:1 rs3) & ~(1 << bit);
	* rs3 = masked | (~$(C_FLAG) << bit);
}
:bist #bit,imm8mem.b is op8=0x7F; imm8mem.b; op8=0x67; b7=1 & bit & lnyb=0 {
	local masked = imm8mem.b &  ~(1 << bit);
	imm8mem.b = masked | (~$(C_FLAG) << bit);
}
:bixor #bit,dreg is op8=0x75; b7=1 & bit & dreg {
	local rbit = ~((dreg >> bit) & 1);
	$(C_FLAG) = $(C_FLAG) ^ rbit;
}
:bixor #bit,@rs3 is op8=0x7C; b7=0 & rs3 & lnyb=0; op8=0x75; b7=1 & bit & lnyb=0 { 
	$(C_FLAG) = $(C_FLAG) ^ ~((* rs3) >> bit);
}
:bixor #bit,imm8mem.b is op8=0x7E; imm8mem.b; op8=0x75; b7=1 & bit & lnyb=0 {
	$(C_FLAG) = $(C_FLAG) ^ ~(imm8mem.b >> bit);
}
:bld #bit,dreg is op8=0x77; b7=0 & bit & dreg {
	$(C_FLAG) = ((dreg >> bit) & 1);
}
:bld #bit,@rs3 is op8=0x7C; b7=0 & rs3 & lnyb=0; op8=0x77; b7=0 & bit & lnyb=0 { 
	$(C_FLAG) = ((* rs3) >> bit);
}
:bld #bit,imm8mem.b is op8=0x7E; imm8mem.b; op8=0x77; b7=0 & bit & lnyb=0 {
	$(C_FLAG) = (imm8mem.b >> bit);
}
:bnot #bit,dreg is op8=0x71; b7=0 & bit & dreg {
	dreg = dreg ^ (1<<bit);
}
:bnot #bit,@rs3 is op8=0x7D; b7=0 & rs3 & lnyb=0; op8=0x71; b7=0 & bit & lnyb=0 {
	* rs3 = (*:1 rs3) ^ (1 << bit);
}
:bnot #bit,imm8mem.b is op8=0x7F; imm8mem.b; op8=0x71; b7=0 & bit & lnyb=0 {
	imm8mem.b = imm8mem.b ^ (1<<bit);
}
:bnot sreg,dreg is op8=0x61; sreg & dreg {
	dreg = dreg ^ (1<<(sreg&7));
}
:bnot sreg,@rs3 is op8=0x7D; b7=0 & rs3 & lnyb=0; op8=0x61; sreg & lnyb=0 {
	* rs3 = (*:1 rs3) ^ (1<<(sreg&7));
}
:bnot sreg,imm8mem.b is op8=0x7F; imm8mem.b; op8=0x61; sreg & lnyb=0 {
	imm8mem.b = imm8mem.b ^ (1<<(sreg&7));
}
:bor #bit,dreg is op8=0x74; b7=0 & bit & dreg {
	local rbit = ((dreg >> bit) & 1);
	$(C_FLAG) = $(C_FLAG) | rbit;
}
:bor #bit,@rs3 is op8=0x7C; b7=0 & rs3 & lnyb=0; op8=0x74; b7=0 & bit & lnyb=0 { 
	$(C_FLAG) = $(C_FLAG) | ((* rs3) >> bit);
}
:bor #bit,imm8mem.b is op8=0x7E; imm8mem.b; op8=0x74; b7=0 & bit & lnyb=0 {
	$(C_FLAG) = $(C_FLAG) | (imm8mem.b >> bit);
}
:bset #bit,dreg is op8=0x70; b7=0 & bit & dreg {
	dreg = dreg | (1 << bit);
}
:bset #bit,@rs3 is op8=0x7D; b7=0 & rs3 & lnyb=0; op8=0x70; b7=0 & bit & lnyb=0 {
	* rs3 = (*:1 rs3) | (1 << bit);
}
:bset #bit,imm8mem.b is op8=0x7F; imm8mem.b; op8=0x70; b7=0 & bit & lnyb=0 {
	imm8mem.b = imm8mem.b | (1 << bit);
}
:bset sreg,dreg is op8=0x60; sreg & dreg {
	dreg = dreg | (1 << (sreg & 7));
}
:bset sreg,@rs3 is op8=0x7D; b7=0 & rs3 & lnyb=0; op8=0x60; sreg & lnyb=0 {
	* rs3 = (*:1 rs3) | (1 << (sreg & 7));
}
:bset sreg,imm8mem.b is op8=0x7F; imm8mem.b; op8=0x60; sreg & lnyb=0 {
	imm8mem.b = imm8mem.b | (1 << (sreg & 7));
}
:bst #bit,dreg is op8=0x67; b7=0 & bit & dreg {
	local masked = dreg & ~(1 << bit);
	dreg = masked | ($(C_FLAG) << bit);
}
:bst #bit,@rs3 is op8=0x7D; b7=0 & rs3 & lnyb=0; op8=0x67; b7=0 & bit & lnyb=0 {
	local masked = (*:1 rs3) & ~(1 << bit);
	* rs3 = masked | ($(C_FLAG) << bit);
}
:bst #bit,imm8mem.b is op8=0x7F; imm8mem.b; op8=0x67; b7=0 & bit & lnyb=0 {
	local masked = imm8mem.b &  ~(1 << bit);
	imm8mem.b = masked | ($(C_FLAG) << bit);
}
:btst #bit,dreg is op8=0x73; b7=0 & bit & dreg {
	$(Z_FLAG) = ~(dreg >> bit) & 1;
}
:btst #bit,@rs3 is op8=0x7C; b7=0 & rs3 & lnyb=0; op8=0x73; b7=0 & bit & lnyb=0 {
	$(Z_FLAG) = ~((*:1 rs3) >> bit) & 1;
}
:btst #bit,imm8mem.b is op8=0x7E; imm8mem.b; op8=0x73; b7=0 & bit & lnyb=0 {
	$(Z_FLAG) = ~(imm8mem.b >> bit) & 1;
}
:btst sreg,dreg is op8=0x63; sreg & dreg {
	$(Z_FLAG) = ~(dreg >> (sreg & 7)) & 1;
}
:btst sreg,@rs3 is op8=0x7C; b7=0 & rs3 & lnyb=0; op8=0x63; sreg & lnyb=0 {
	$(Z_FLAG) = ~((*:1 rs3) >> (sreg & 7)) & 1;
}
:btst sreg,imm8mem.b is op8=0x7E; imm8mem.b; op8=0x63; sreg & lnyb=0 {
	$(Z_FLAG) = ~(imm8mem.b >> (sreg & 7)) & 1;
}
:bxor #bit,dreg is op8=0x75; b7=0 & bit & dreg {
	local rbit = ((dreg >> bit) & 1);
	$(C_FLAG) = $(C_FLAG) ^ rbit;
}
:bxor #bit,@rs3 is op8=0x7C; b7=0 & rs3 & lnyb=0; op8=0x75; b7=0 & bit & lnyb=0 { 
	$(C_FLAG) = $(C_FLAG) ^ ((* rs3) >> bit) & 1;
}
:bxor #bit,imm8mem.b is op8=0x7E; imm8mem.b; op8=0x75; b7=0 & bit & lnyb=0 {
	$(C_FLAG) = $(C_FLAG) ^ (imm8mem.b >> bit) & 1;
}

:bsr pcoff8 is op8=0x55; pcoff8 {
	push2(&:2 inst_next);
	call pcoff8;
}

:cmp.b #imm8,dreg is op4=0xA & dreg; imm8 {
	subflags3(dreg, imm8);
	resflags(dreg-imm8);
}
:cmp.b sreg,dreg is op8=0x1C; sreg & dreg {
	subflags3(dreg, sreg);
	resflags(dreg-sreg);
}
:cmp.w rs3,rd3 is op8=0x1D; b7=0 & rs3 & b3=0 & rd3 {
	subflags11(rd3, rs3);
	resflags(rd3-rs3);
}
:daa dreg is op8=0x0F; hnyb=0 & dreg {
	#local ln:4 = zext(dreg[0,4]);
	#local un:4 = zext(dreg[4,4]);
	bcdAdjust(dreg);
  # TODO
} 
:das dreg is op8=0x1F; hnyb=0 & dreg {
	#local ln:4 = zext(dreg[0,4]);
	#local un:4 = zext(dreg[4,4]);
	bcdAdjust(dreg);
  # TODO
}
:dec dreg is op8=0x1A; hnyb=0 & dreg {
	$(V_FLAG) = dreg == 0x80;
	dreg = dreg - 1;
	resflags(dreg);
}
:divxu sreg,rd3 is op8=0x51; sreg & b3=0 & rd3 {
	local rem = rd3 % sext(sreg);
	local quot = rd3 / sext(sreg);
	rd3 = rem << 8 | quot;
	resflags(sreg);
}
:eepmov is op8=0x7B; op8=0x5C; op8=0x59; op8=0x8F {
	if (r4l != 0) goto <end>;
	<nextbyte>
	*:1 r6 = *:1 r5;
	r5 = r5 + 1;
	r6 = r6 + 1;
	r4l = r4l - 1;
	if (r4l != 0) goto <nextbyte>;
	<end>
}
:inc dreg is op8=0x0A; hnyb=0 & dreg {
	$(V_FLAG) = dreg == 0x7F;
	dreg = dreg + 1;
	resflags(dreg);
}

:jmp @rs3 is op8=0x59; b7=0 & rs3 & lnyb=0 {
	goto [rs3];
}
:jmp @addr16 is op8=0x5A; op8=0; addr16 {
	goto addr16;
}
:jmp @@addr8 is op8=0x5B; addr8 {
	goto [addr8];
}
:jsr @rs3 is op8=0x5D; b7=0 & rs3 & lnyb=0 {
	push2(&:2 inst_next);
	call [rs3];
}
:jsr @addr16 is op8=0x5E; op8=0; addr16 {
	push2(&:2 inst_next);
	call addr16;
}
:jsr @@addr8 is op8=0x5F; addr8 {
	push2(&:2 inst_next);
	call [addr8];
}

:ldc "#"imm8,"ccr" is op8=0x07; imm8 { ccr = imm8; }
:ldc dreg,"ccr" is op8=0x03; hnyb=0 & dreg { ccr = dreg; }
:mov.b sreg,dreg is op8=0x0C; sreg & dreg { dreg = sreg; movflags(dreg); }
:mov.w rs3,rd3 is op8=0x0D; b7=0 & rs3 & b3=0 & rd3 { rd3 = rs3; movflags(rd3); }
:mov.b "#"imm8,dreg is op4=0xF & dreg; imm8 { dreg = imm8; movflags(dreg); }
:mov.b @rs3,dreg is op8=0x68; b7=0 & rs3 & dreg { dreg = *:1 rs3; movflags(dreg); }
:mov.b @(imm16,rs3),dreg is op8=0x6E; b7=0 & rs3 & dreg; imm16 { tmp = rs3 + imm16; dreg = *:1 tmp; movflags(dreg); }
:mov.b @rs3+,dreg is op8=0x6C; b7=0 & rs3 & dreg { dreg = *:1 rs3; rs3 = rs3 + 1; movflags(dreg); }
:mov.b imm8mem.b,dreg is op4=0x2 & dreg; imm8mem.b { dreg = imm8mem.b; movflags(dreg); }
:mov.b imm16mem.b,dreg is op8=0x6A; hnyb=0 & dreg; imm16mem.b { dreg = imm16mem.b; movflags(dreg); }
:mov.w "#"imm16,rd3 is op8=0x79; hnyb=0 & b3=0 & rd3; imm16 { rd3 = imm16; movflags(rd3); }
:mov.w @rs3,rd3 is op8=0x69; b7=0 & rs3 & b3=0 & rd3 { rd3 = *:1 rs3; movflags(rd3); }
:mov.w @(imm16,rs3),rd3 is op8=0x6F; b7=0 & rs3 & b3=0 & rd3; imm16 { tmp = rs3 + imm16; rd3 = *:2 tmp; movflags(rd3); }
:mov.w @rs3+,rd3 is op8=0x6D; b7=0 & rs3 & b3=0 & rd3 { rd3 = *:2 rs3; rs3 = rs3 + 2; movflags(rd3); }
:mov.w imm16mem.w,rd3 is op8=0x6B; hnyb=0 & b3=0 & rd3; imm16mem.w { rd3 = imm16mem.w; movflags(rd3); }
:mov.b dreg,@rs3 is op8=0x68; b7=1 & rs3 & dreg { *:1 rs3 = dreg; movflags(dreg); }
:mov.b dreg,@(imm16,rs3) is op8=0x6E; b7=1 & rs3 & dreg; imm16 { tmp = rs3 + imm16; *:1 tmp = dreg; movflags(dreg); }
:mov.b dreg,@-rs3 is op8=0x6C; b7=1 & rs3 & dreg { rs3 = rs3 - 1; *:1 rs3 = dreg; movflags(dreg); }
:mov.b dreg,imm8mem.b is op4=0x3 & dreg; imm8mem.b { imm8mem.b = dreg; movflags(dreg); }
:mov.b dreg,imm16mem.b is op8=0x6A; hnyb=8 & dreg; imm16mem.b { imm16mem.b = dreg; movflags(dreg); }
:mov.w rd3,@rs3 is op8=0x69; b7=1 & rs3 & b3=0 & rd3 { rd3 = *:1 rs3; movflags(rd3); }
:mov.w rd3,@(imm16,rs3) is op8=0x6F; b7=1 & rs3 & b3=0 & rd3; imm16 { tmp = rs3 + imm16; rd3 = *:2 tmp; movflags(rd3); }
:mov.w rd3,@-rs3 is op8=0x6D; b7=1 & rs3 & b3=0 & rd3 { rs3 = rs3 - 2; *:2 rs3 = rd3; movflags(rd3); }
:mov.w rd3,imm16mem.w is op8=0x6B; hnyb=8 & b3=0 & rd3; imm16mem.w { imm16mem.w = rd3; movflags(rd3); }
:movfpe imm16mem.b,dreg is op8=0x6A; hnyb=4 & dreg; imm16mem.b { dreg = imm16mem.b; movflags(dreg); }
:movtpe dreg,imm16mem.b is op8=0x6A; hnyb=0xC & dreg; imm16mem.b { imm16mem.b = dreg; movflags(dreg); }

:mulxu sreg,rd3 is op8=0x50; sreg & b3=0 & rd3 { rd3 = (rd3 & 0xFF) * zext(sreg); }
:neg dreg is op8=0x17; op4=8 & dreg { subflags3(0,dreg); dreg = 0-dreg; resflags(dreg); }
:nop is op8=0; op8=0 unimpl
:not dreg is op8=0x17; op4=0 & dreg { dreg = ~dreg; movflags(dreg); }
:or #imm8,dreg is op4=0xC & dreg; imm8 {
	dreg = dreg | imm8;
	movflags(dreg);
}
:or sreg,dreg is op8=0x14; sreg & dreg {
	dreg = dreg | sreg;
	movflags(dreg);
}
:orc "#"imm8,"ccr" is op8=0x04; imm8 { ccr = ccr | imm8; }
:pop rd3 is op8=0x6D; op4=7 & b3=0 & rd3 { pop2(rd3); movflags(rd3); }
:push rd3 is op8=0x6D; op4=0xF & b3=0 & rd3 { push2(rd3); movflags(rd3); }

:rotl dreg is op8=0x12; op4=8 & dreg {
	local c = dreg >> 7;
	$(C_FLAG) = c;
	dreg = (dreg << 1) | c;
	movflags(dreg);
}
:rotr dreg is op8=0x13; op4=8 & dreg {
	local c = dreg & 1;
	$(C_FLAG) = c;
	dreg = (c << 7) | (dreg >> 1);
	movflags(dreg);
}
:rotxl dreg is op8=0x12; op4=0 & dreg {
	local c = $(C_FLAG);
	$(C_FLAG) = dreg >> 7;
	dreg = (dreg << 1) | c;
	movflags(dreg);
}
:rotxr dreg is op8=0x13; op4=0 & dreg {
	local c = $(C_FLAG);
	$(C_FLAG) = dreg & 1;
	dreg = (c << 7) | (dreg >> 1);
	movflags(dreg);
}
:rte is op8=0x56; op8=0x70 {
	pop2(ccr); # CCR stored in both bytes of word
	pop2(pc);
	return [pc];
}
:rts is op8=0x54; op8=0x70 { pop2(pc); return [pc]; }

:shal dreg is op8=0x10; op4=8 & dreg {
	$(V_FLAG) = dreg >> 7;
	$(C_FLAG) = dreg >> 7;
	dreg = dreg << 1;
	resflags(dreg);
}
:shar dreg is op8=0x11; op4=8 & dreg {
	$(C_FLAG) = dreg & 1;
	dreg = dreg s>> 1;
	movflags(dreg);
}
:shll dreg is op8=0x10; op4=0 & dreg {
	$(C_FLAG) = dreg >> 7;
	dreg = dreg << 1;
	movflags(dreg);
}
:shlr dreg is op8=0x11; op4=0 & dreg {
	$(C_FLAG) = dreg & 1;
	dreg = dreg >> 1;
	movflags(dreg);
}
:sleep is op8=0x01; op8=0x80 unimpl
:stc "ccr",dreg is op8=0x02; hnyb=0 & dreg { dreg = ccr; }
:sub.b sreg,dreg is op8=0x18; sreg & dreg { subflags3(dreg,sreg); dreg = dreg - sreg; resflags(dreg); }
:sub.w rs3,rd3 is op8=0x19; b7=0 & rs3 & b3=0 & rd3 {subflags11(rd3,rs3); rd3 = rd3 - rs3; resflags(rd3); }
:subs "#1",rd3 is op8=0x1B; op4=0 & b3=0 & rd3 { rd3 = rd3 - 1; }
:subs "#2",rd3 is op8=0x1B; op4=8 & b3=0 & rd3 { rd3 = rd3 - 1; }
:subx "#"imm8,dreg is op4=0xB & dreg; imm8 { local s = imm8 + $(C_FLAG); subflags3(dreg,s); dreg = dreg - s; resflags(dreg); }
:subx sreg,dreg is op8=0x1E; sreg & dreg { local s = sreg + $(C_FLAG); subflags3(dreg,s); dreg = dreg - s; resflags(dreg); }
:xor "#"imm8,dreg is op4=0xD & dreg; imm8 { dreg = dreg ^ imm8; movflags(dreg); }
:xor sreg,dreg is op8=0x15; sreg & dreg { dreg = dreg ^ sreg; movflags(dreg); }
:xorc "#"imm8,"ccr" is op8=0x05; imm8 { ccr = ccr ^ imm8; }

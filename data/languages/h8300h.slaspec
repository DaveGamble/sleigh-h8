# H8/300H sleigh specification
# (reference: http://www.bitsavers.org/components/hitachi/h8/H8_300H_Programming_Manual.pdf)
#
# * Object code compatible with H8/300
# * More/larger registers
# * Expanded address space (advanced mode)
# * Extended addressing modes
# * More instructions

define endian=big;

define alignment=2;

define space ram type=ram_space size=3 default;
define space register type=register_space size=2;


define space address type=ram_space size=3;

# Overlapping names for general registers
define register offset=0 size=4 [er0 er1 er2 er3 er4 er5 er6 er7];
define register offset=0 size=2 [e0 r0 e1 r1 e2 r2 e3 r3 e4 r4 e5 r5 e6 r6 e7 r7];
define register offset=0 size=1 [_ _ r0h r0l _ _ r1h r1l _ _ r2h r2l _ _ r3h r3l _ _ r4h r4l _ _ r5h r5l _ _ r6h r6l _ _ r7h r7l];

define register offset=0x100 size=3 [pc];
define register offset=0x200 size=1 [ccr];

# CCR Flags
@define I_FLAG   "ccr[7,1]"
@define UI_FLAG  "ccr[6,1]"
@define H_FLAG  "ccr[5,1]"
@define U_FLAG  "ccr[4,1]"
@define N_FLAG   "ccr[3,1]"
@define Z_FLAG   "ccr[2,1]"
@define V_FLAG   "ccr[1,1]"
@define C_FLAG   "ccr[0,1]"

@define SP "er7"

# PC is stored on stack in lower 24 bits of 32 bit word.
macro pushpc() { er7 = er7-4; *[register]:3 (er7+1) = &:3 inst_next; }
macro poppc() { pc = *[register]:3 (er7+1); er7 = er7+4; }
macro poppcccr() { 
  ccr = *[register]:1 er7; # CCR stored in top byte of 32 bit word
  pc = *[register]:3 (er7+1);
  er7 = er7+4;
}

#@define asize "3"

# object compatible with H8/300
@include "h8300ins.sinc"
